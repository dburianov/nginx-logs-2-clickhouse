input {
  beats {
    port => 5044
        ssl => true
        ssl_certificate => "/etc/logstash/logstash.crt"
        ssl_key => "/etc/logstash/logstash.key"
  }
}

filter {
    ruby {
      code => " if event.get('message')
           event.set('message', event.get('message').gsub('\x','Xx'))
           event.set('message', event.get('message').gsub('\\x','XXx'))
        end
      "
    }
    json {
        source => "message"
    }
    if [status] == 000     { mutate { replace => ["status", 0] } }
    mutate {
        convert => { "status" => "integer" }
        convert => { "body_bytes_sent" => "integer" }
        convert => { "request_time" => "float" }
        convert => { "request_time" => "float" }
        convert => { "upstream_response_time" => "float" }
        convert => { "upstream_connect_time" => "float" }
        convert => { "upstream_header_time" => "float" }
        convert => { "gzip_ratio" => "float" }
        remove_field => [ "host" ]
        remove_field => [ "agent" ]
        remove_field => [ "ecs" ]
        remove_field => [ "log" ]
        remove_field => [ "input" ]
        remove_field => [ "tags" ]
    }
    mutate {
        rename => { "host.ip" => "host" }
    }
    date {
        match => [ "time_local", "dd/MMM/YYYY:H:m:s Z" ]
        remove_field => [ "timestamp", "@timestamp" ]
        target => [ "logdatetime" ]
    }
    ruby {
        code => "tstamp = event.get('logdatetime').to_i
                 event.set('logtime', Time.at(tstamp).strftime('%Y-%m-%d %H:%M:%S'))"
    }
# comment parce UA
#      useragent {
#        source => "http_user_agent"
#        target => "user_agent"
#      }
#      mutate {
#        rename => { "[user_agent][minor]" => "user_agent_minor" }
#        rename => { "[user_agent][build]" => "user_agent_build" }
#        rename => { "[user_agent][os]" => "user_agent_os" }
#        rename => { "[user_agent][device]" => "user_agent_device" }
#        rename => { "[user_agent][major]" => "user_agent_major" }
#        rename => { "[user_agent][os_name]" => "user_agent_os_name" }
#        rename => { "[user_agent][name]" => "user_agent_name" }
#        rename => { "[user_agent][os_major]" => "user_agent_os_major" }
#        rename => { "[user_agent][patch]" => "user_agent_patch" }
#        rename => { "[user_agent][os_minor]" => "user_agent_os_minor" }
#        remove_field => [ "[user_agent][minor]",
#                  "[user_agent][build]",
#                  "[user_agent][os]",
#                  "[user_agent][device]",
#                  "[user_agent][major]",
#                  "[user_agent][os_name]",
#                  "[user_agent][name]",
#                  "[user_agent][os_major]",
#                  "[user_agent][patch]",
#                  "[user_agent][os_minor]",
#                  "[user_agent]"
#                ]
#      }

# Add GeoIP
#      geoip {
#        source => "remote_addr"
#        target => "geoip"
#      }
# URI parse
#    grok {
#        match => { "request" => [
#              "%{GREEDYDATA:[req_false]}"
#          ] }
#    }
    if "_grokparsefailure" not in [tags] {
        mutate {
          remove_field => [ "message",
                      "facility",
                      "facility_label",
                      "priority",
                      "severity",
                      "severity_label",
                      "timestamp",
                      "program",
                      "@timestamp",
                      "@version",
                      "time_iso8601",
                      "priority",
                      "facility",
                      "facility_label",
                      "program",
                      "severity",
                      "severity_label",
                      "logdatetime"
          ]
        }
    }
}
